package secondbrain.domain.tooldefs;


import secondbrain.domain.context.RagDocumentContext;
import secondbrain.domain.context.RagMultiDocumentContext;

import java.util.List;
import java.util.Map;

/**
 * Represents a tool that can be called by the LLM.
 */
public interface Tool<T> {
    /**
     * Gets the name of the tool.
     *
     * @return The name of the tool
     */
    String getName();

    /**
     * Gets the description of the tool.
     *
     * @return The description of the tool
     */
    String getDescription();

    /**
     * Gets the arguments received by the tool. These are sent to the LLM.
     *
     * @return The arguments of the tool
     */
    List<ToolArguments> getArguments();

    /**
     * Builds the initial environmentSettings for the tool. This environmentSettings is either the raw data from the upstream source
     * (think Slack messages etc.) or the processed version of the data (think git commits that have been
     * summarized into a paragraph).
     * <p>
     * The difference between arguments and environmentSettings is that arguments are values that are supplied by the user, either
     * extracted from the prompt or passed in via the CLI, while environmentSettings are values that come from the environment,
     * typically environment variables or other values generated by the system. Arguments can be trusted, meaning they come from
     * deterministic sources like system properties, or untrusted, meaning they were extracted from user input. Untrusted arguments
     * may be sanitized or validated before being passed to the LLM.
     * <p>
     * This environmentSettings is either used to build the output of this tool, or a meta-tool combines this environmentSettings with the
     * environmentSettings of other tools to answer questions that span multiple data sources.
     * <p>
     * The difference between getContext() and call() is that getContext() provides the information required to answer
     * a question, while call() actually answers the question. While getContext() may call the LLM to produce a summary
     * of the upstream data (perhaps to condense large amounts of upstream data or convert data like git diffs into plain
     * text), getContext() does not typically pass the prompt argument to the LLM.
     *
     * @param environmentSettings The setting associated with the prompt. These are values that come from the environment (like credentials) rather than from the prompt.
     * @param prompt              The prompt supplied by the user.
     * @param arguments           The arguments extracted from the prompt.
     * @return The individual items that make up the environmentSettings for the prompt.
     */
    List<RagDocumentContext<T>> getContext(
            Map<String, String> environmentSettings,
            String prompt,
            List<ToolArgs> arguments);

    /**
     * Calls the tool. Typically, this function will call getContext() to get the environmentSettings for the prompt, and then
     * pass the environmentSettings and the prompt to the LLM for the final answer.
     *
     * @param environmentSettings The environmentSettings associated with the prompt. These are values that come from the environment (like credentials) rather than from the prompt.
     * @param prompt              The prompt.
     * @param arguments           The arguments extracted from the prompt.
     * @return The result from the LLM and the contents that was used to generate the result.
     */
    RagMultiDocumentContext<T> call(Map<String, String> environmentSettings,
                                    String prompt,
                                    List<ToolArgs> arguments);

    String getContextLabel();
}
